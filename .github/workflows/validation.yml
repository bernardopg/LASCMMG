name: 🔍 Workflow Validation

on:
  workflow_dispatch:
  push:
    branches: [main, develop]
    paths:
      - '.github/workflows/**'
      - 'scripts/**'
      - 'package.json'
      - 'backend/setup-db.js'

env:
  NODE_VERSION: '18'

jobs:
  validate-basic-setup:
    name: 📋 Validate Basic Setup
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Root Dependencies
        run: npm ci

      - name: 📦 Install Frontend Dependencies
        run: |
          cd frontend-react
          npm ci

      - name: 🔍 Validate Package Scripts
        run: |
          echo "Validating package.json scripts..."
          node -e "
            const pkg = require('./package.json');
            const requiredScripts = ['start', 'setup:db', 'health-check', 'test', 'lint'];
            const missing = requiredScripts.filter(script => !pkg.scripts[script]);
            if (missing.length > 0) {
              console.error('Missing scripts:', missing);
              process.exit(1);
            }
            console.log('✅ All required scripts are present');
          "

      - name: 🔧 Validate Environment Setup
        run: |
          echo "Setting up test environment..."
          cp backend/.env.example backend/.env
          echo "NODE_ENV=test" >> backend/.env
          echo "PORT=3000" >> backend/.env
          echo "JWT_SECRET=test-secret-$(openssl rand -hex 16)" >> backend/.env
          echo "COOKIE_SECRET=test-cookie-$(openssl rand -hex 16)" >> backend/.env
          echo "CSRF_SECRET=test-csrf-$(openssl rand -hex 16)" >> backend/.env
          echo "✅ Environment configured"

      - name: 🗄️ Test Database Setup
        run: |
          echo "Testing database setup..."
          npm run setup:db
          echo "✅ Database setup successful"

      - name: 🔍 Validate Health Check Script
        run: |
          echo "Testing health check script..."
          # Verificar se o script existe e é executável
          if [ ! -f "scripts/health-check.js" ]; then
            echo "❌ Health check script not found"
            exit 1
          fi

          # Testar sintaxe do script
          node -c scripts/health-check.js
          echo "✅ Health check script syntax is valid"

      - name: 🚀 Test Server Start (Quick)
        run: |
          echo "Testing server startup..."
          # Iniciar servidor em background por um tempo limitado
          timeout 15s npm start &
          SERVER_PID=$!
          sleep 5

          # Verificar se o processo ainda está rodando
          if kill -0 $SERVER_PID 2>/dev/null; then
            echo "✅ Server started successfully"
            kill $SERVER_PID
          else
            echo "❌ Server failed to start"
            exit 1
          fi

  validate-frontend-build:
    name: 🎭 Validate Frontend Build
    runs-on: ubuntu-latest
    needs: [validate-basic-setup]

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          npm ci
          cd frontend-react && npm ci

      - name: 🏗️ Test Frontend Build
        run: |
          echo "Testing frontend build..."
          npm run frontend:build

          # Verificar se os arquivos de build foram criados
          if [ ! -d "frontend-react/dist" ]; then
            echo "❌ Build directory not created"
            exit 1
          fi

          if [ ! -f "frontend-react/dist/index.html" ]; then
            echo "❌ index.html not found in build"
            exit 1
          fi

          echo "✅ Frontend build successful"

      - name: 📏 Check Build Size
        run: |
          echo "Checking build size..."
          du -sh frontend-react/dist/

          # Verificar se o build não está muito grande (limite: 50MB)
          SIZE=$(du -sm frontend-react/dist/ | cut -f1)
          if [ $SIZE -gt 50 ]; then
            echo "⚠️ Build size is larger than 50MB: ${SIZE}MB"
          else
            echo "✅ Build size is acceptable: ${SIZE}MB"
          fi

  validate-linting:
    name: 🔍 Validate Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          npm ci
          cd frontend-react && npm ci

      - name: 🔍 Test Root Linting
        run: |
          echo "Testing root linting..."
          npm run lint -- --max-warnings=10
          echo "✅ Root linting passed"

      - name: 🔍 Test Frontend Linting
        run: |
          echo "Testing frontend linting..."
          npm run frontend:lint -- --max-warnings=10
          echo "✅ Frontend linting passed"

      - name: 🎨 Test Code Formatting
        run: |
          echo "Testing code formatting..."
          npm run format -- --check || {
            echo "❌ Code formatting issues found. Run 'npm run format' to fix."
            exit 1
          }
          echo "✅ Code formatting is correct"

  summary:
    name: 📋 Validation Summary
    runs-on: ubuntu-latest
    needs: [validate-basic-setup, validate-frontend-build, validate-linting]
    if: always()

    steps:
      - name: 📋 Print Results
        run: |
          echo "🎯 Workflow Validation Results:"
          echo "================================"
          echo "Basic Setup: ${{ needs.validate-basic-setup.result }}"
          echo "Frontend Build: ${{ needs.validate-frontend-build.result }}"
          echo "Code Quality: ${{ needs.validate-linting.result }}"
          echo "================================"

          if [ "${{ needs.validate-basic-setup.result }}" = "success" ] && \
             [ "${{ needs.validate-frontend-build.result }}" = "success" ] && \
             [ "${{ needs.validate-linting.result }}" = "success" ]; then
            echo "✅ All validations passed! Workflows are ready."
          else
            echo "❌ Some validations failed. Check the logs above."
            exit 1
          fi
